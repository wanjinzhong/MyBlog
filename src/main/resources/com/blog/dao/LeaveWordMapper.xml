<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blog.dao.LeaveWordMapper">
	<resultMap id="BaseResultMap" type="com.blog.bean.LeaveWord">
		<id column="leave_word_id" jdbcType="INTEGER" property="leaveWordId" />
		<result column="user_id" jdbcType="INTEGER" property="userId" />
		<result column="time" jdbcType="TIMESTAMP" property="time" />
		<result column="blogger_id" jdbcType="INTEGER" property="bloggerId" />
		<result column="is_new" jdbcType="INTEGER" property="isNew" />
	</resultMap>
	<resultMap extends="BaseResultMap" id="ResultMapWithBLOBs"
		type="com.blog.bean.LeaveWord">
		<result column="content" jdbcType="LONGVARCHAR" property="content" />
	</resultMap>
	<resultMap id="FullResultMap" type="com.blog.bean.LeaveWordFull"
		extends="ResultMapWithBLOBs">
		<result column="user_name" property="userName" jdbcType="VARCHAR" />
		<result column="image_url" property="userPic" jdbcType="VARCHAR"/>
	</resultMap>
	<sql id="Base_Column_List">
		leave_word_id, leave_word.user_id user_id, time,
		blogger_id, is_new
	</sql>
	<sql id="Blob_Column_List">
		content
	</sql>
	<sql id="User_Column_List">
	users.login_name user_name, image_url
	</sql>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="ResultMapWithBLOBs">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from leave_word
		where leave_word_id = #{leaveWordId,jdbcType=INTEGER}
	</select>
	<!-- 根据主键获取留言 -->
	<select id="selectFullByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="FullResultMap">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		,<include refid="User_Column_List"/>
		from leave_word
		join users on users.user_id
		= leave_word.user_id
		where leave_word_id
		=#{leaveWordId,jdbcType=INTEGER}
	</select>
	<!-- 根据bloggerid获取留言 -->
	<select id="selectByBloggerId" resultMap="FullResultMap"
		parameterType="java.util.Map">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		
		,<include refid="User_Column_List"/>
		 from blog.leave_word
		join users on
		users.user_id = leave_word.user_id where blogger_id =
		#{id,jdbcType=INTEGER}
		order by `time` desc
		<if test="index != null and pageSize != null">
			limit #{index,jdbcType=INTEGER},
			#{pageSize,jdbcType=INTEGER}
		</if>
	</select>
	<!-- 根据bloggerid获取未读留言 -->
	<select id="selectByBloggerIdWhichIsUnread" resultMap="FullResultMap"
		parameterType="java.util.Map">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		,
		users.login_name user_name, image_url from blog.leave_word
		join users on
		users.user_id = leave_word.user_id where blogger_id =
		#{id,jdbcType=INTEGER} and is_new = 1
		order by `time` desc
		<if test="index != null and pageSize != null">
			limit #{index,jdbcType=INTEGER},
			#{pageSize,jdbcType=INTEGER}
		</if>
	</select>
	<!-- 获取评论总条数 -->
	<select id="selectCount" resultType="java.lang.Integer"
		parameterType="java.lang.Integer">
		select count(*) from leave_word where blogger_id =
		#{id,jdbcType=INTEGER}
	</select>
	<!-- 获取未读评论总条数 -->
	<select id="selectCountWhichIsUnread" resultType="java.lang.Integer"
		parameterType="java.lang.Integer">
		select count(*) from leave_word where blogger_id =
		#{id,jdbcType=INTEGER} and is_new = 1
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		leave_word
		where leave_word_id = #{leaveWordId,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.blog.bean.LeaveWord">
		insert into leave_word
		(leave_word_id, user_id, time,
		blogger_id, is_new, content
		)
		values
		(#{leaveWordId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER},
		#{time,jdbcType=TIMESTAMP},
		#{bloggerId,jdbcType=INTEGER},
		#{isNew,jdbcType=INTEGER}, #{content,jdbcType=LONGVARCHAR}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.blog.bean.LeaveWord">
		insert into leave_word
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="leaveWordId != null">
				leave_word_id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="time != null">
				time,
			</if>
			<if test="bloggerId != null">
				blogger_id,
			</if>
			<if test="isNew != null">
				is_new,
			</if>
			<if test="content != null">
				content,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="leaveWordId != null">
				#{leaveWordId,jdbcType=INTEGER},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="time != null">
				#{time,jdbcType=TIMESTAMP},
			</if>
			<if test="bloggerId != null">
				#{bloggerId,jdbcType=INTEGER},
			</if>
			<if test="isNew != null">
				#{isNew,jdbcType=INTEGER},
			</if>
			<if test="content != null">
				#{content,jdbcType=LONGVARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.blog.bean.LeaveWord">
		update leave_word
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			<if test="time != null">
				time = #{time,jdbcType=TIMESTAMP},
			</if>
			<if test="bloggerId != null">
				blogger_id = #{bloggerId,jdbcType=INTEGER},
			</if>
			<if test="isNew != null">
				is_new = #{isNew,jdbcType=INTEGER},
			</if>
			<if test="content != null">
				content = #{content,jdbcType=LONGVARCHAR},
			</if>
		</set>
		where leave_word_id = #{leaveWordId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKeyWithBLOBs" parameterType="com.blog.bean.LeaveWord">
		update
		leave_word
		set user_id = #{userId,jdbcType=INTEGER},
		time =
		#{time,jdbcType=TIMESTAMP},
		blogger_id = #{bloggerId,jdbcType=INTEGER},
		is_new = #{isNew,jdbcType=INTEGER},
		content =
		#{content,jdbcType=LONGVARCHAR}
		where leave_word_id =
		#{leaveWordId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.blog.bean.LeaveWord">
		update leave_word
		set user_id = #{userId,jdbcType=INTEGER},
		time =
		#{time,jdbcType=TIMESTAMP},
		blogger_id = #{bloggerId,jdbcType=INTEGER},
		is_new = #{isNew,jdbcType=INTEGER}
		where leave_word_id =
		#{leaveWordId,jdbcType=INTEGER}
	</update>
</mapper>